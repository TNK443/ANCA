# -*- coding: utf-8 -*-
"""00598.ipynb

\title{Resposta do Trabalho 01 | 2.1 - Pesquisa Completa: 00598}
\subtitle{Análise e Complexidade de Algoritmos}
\author{Dornélio Mori Junior}
\affil{PPComp --- Campus Serra, Ifes}
\date{2021/04}

Automatically generated by Colaboratory.

Original file is located at
    https://github.com/TNK443/AnCA/blob/main/Trabalho01/00598/00598.py
    
    https://github.com/TNK443/AnCA/blob/main/Trabalho01/00598/PyBook/00598.ipynb
    https://colab.research.google.com/github/TNK443/AnCA/blob/main/Trabalho01/00598/PyBook/00598.ipynb
"""

# ===== CODIGO I ==========
def combs(a):
    if len(a) == 0:
        return [[]]
    cs = []
    for c in combs(a[1:]):
        cs += [c, c+[a[0]]]
    return cs

if __name__ == '__main__':
   try:
    # INPUT
    # The first line of the input is an integer M,... 
    M = int(input())
    # ...then a blank line followed byMdatasets. There is a blankline between datasets.
    input()

    # for m in range(M):
    while (M > 0):
        # Each dataset consists of a first line describing the sizes of subsets to be output,...
        sizesSub = input().split()

        # ...followed by thenames of the newspapers, one per line.
        newspaper=[]
        auxInput=''
        while True:
          # Each line is terminated by an end-of-line marker, and the inputfile is terminated by an end-of-file marker.
          auxInput = input()
          # The newspaper names will contain at most 30 characterseach, and there will be a maximum of 12 newspaper names.
          if (auxInput == '') or (len(newspaper)>=12): break
          newspaper.append(auxInput[:30])
          
        #   (*) means show all subset sizes from 1 to the number of newspapers in the list
        # (a b) means show all subset sizes from a to b, inclusive
        #   (n) means show only subsets of size n

        combinacao = combs(newspaper[::-1])

        if (len(sizesSub)==2):
          a = int(sizesSub[0])
          b = int(sizesSub[1])        
        elif (sizesSub[0]=='*'):
          a = 1
          b = int(len(newspaper))
        else:
          a = int(sizesSub[0])
          b = a
        
        for i in range(a, b+1):
          print(f'Size {i}')
          for k in combinacao[::-1]:
              if len(k) == i: print(', '.join(k))
          print('')     
        
        # Próximo Size (SubConjunto)
        M-=1
        if (M>0):print('')
   except EOFError:
    pass

   finally:
    exit(0)
   exit(0)
   
# ==================== CODIGO III ====================
# def exec_input(size, k, size_):
#     if (k == size):
#       auxOutput=''
#       for i in range(size):
#         if (i != (size-1)): auxOutput+=(f'{output[i]}, ')
#         else: auxOutput+=(output[i])
#       print(auxOutput)
#       return
#     for j in range(size_,len(newspaper)):
#       output[k] = newspaper[j]
#       exec_input(size, k+1, j+1)
# if __name__ == '__main__':
#    try:
#     # INPUT
#     # The first line of the input is an integer M,... 
#     M = int(input())
#     # ...then a blank line followed byMdatasets. There is a blankline between datasets.
#     input()
#     # for m in range(M):
#     while (M > 0):
#         # Each dataset consists of a first line describing the sizes of subsets to be output,...
#         sizesSub = input().split()
#         # ...followed by thenames of the newspapers, one per line.
#         newspaper=[]
#         auxInput=''
#         while True:
#           # Each line is terminated by an end-of-line marker, and the inputfile is terminated by an end-of-file marker.
#           auxInput = input()
#           # The newspaper names will contain at most 30 characterseach, and there will be a maximum of 12 newspaper names.
#           if (auxInput == '') or (len(newspaper)>=12): break
#           newspaper.append(auxInput[:30])         
#         #   (*) means show all subset sizes from 1 to the number of newspapers in the list
#         # (a b) means show all subset sizes from a to b, inclusive
#         #   (n) means show only subsets of size n
#         if (len(sizesSub)==2):
#           a = int(sizesSub[0])
#           b = int(sizesSub[1])        
#         elif (sizesSub[0]=='*'):
#           a = 1
#           b = int(len(newspaper))
#         else:
#           a = int(sizesSub[0])
#           b = a       
#         for i in range(a, b+1):
#           output=['' for j in range(i)]
#           print(f'Size {i}')
#           exec_input(i,0,0)
#           print('')             
#         # Próximo Size (SubConjunto)
#         M-=1
#         if (M>0):print('')
#    except EOFError:
#     pass
#    finally:
#     exit(0)
#    exit(0)
#
# ==================== CODIGO III ====================
# from itertools import combinations
# def combinacao(newspaper,i):
#   comb = []
#   for p in combinations(newspaper, r=i):
#     comb.append(p)
#   return comb
# if __name__ == '__main__':
#    try:
#     # INPUT
#     # The first line of the input is an integer M,... 
#     M = int(input())
#     # ...then a blank line followed byMdatasets. There is a blankline between datasets.
#     input()
#     # for m in range(M):
#     while (M > 0):
#         # Each dataset consists of a first line describing the sizes of subsets to be output,...
#         sizesSub = input().split()
#         # ...followed by thenames of the newspapers, one per line.
#         newspaper=[]
#         auxInput=''
#         while True:
#           # Each line is terminated by an end-of-line marker, and the inputfile is terminated by an end-of-file marker.
#           auxInput = input()
#           # The newspaper names will contain at most 30 characterseach, and there will be a maximum of 12 newspaper names.
#           if (auxInput == '') or (len(newspaper)>=12): break
#           newspaper.append(auxInput[:30])         
#         #   (*) means show all subset sizes from 1 to the number of newspapers in the list
#         # (a b) means show all subset sizes from a to b, inclusive
#         #   (n) means show only subsets of size 
#         if (len(sizesSub)==2):
#           a = int(sizesSub[0])
#           b = int(sizesSub[1])        
#         elif (sizesSub[0]=='*'):
#           a = 1
#           b = int(len(newspaper))
#         else:
#           a = int(sizesSub[0])
#           b = a       
#         for i in range(a, b+1):
#           print(f'Size {i}')
#           comb = combinacao(newspaper,i)
#           for k in comb:
#               if len(k) == i: print(', '.join(k))
#           print("")            
#         # Próximo Size (SubConjunto)
#         M-=1
#         if (M>0):print("")
#    except EOFError:
#     pass
#    finally:
#     exit(0)
#    exit(0)